rule "Security System - Trigger-Management"
when
	Member of gSecurity_AssaultTrigger received update OPEN or
	Member of gSecurity_AssaultTrigger received update ON
then
	if(Security_OperationState.state == 0 || SpecialStateManagement.state == 1) {
		return
	}

	Security_AlarmTime.postUpdate(now.toString)
	var message = "Lautloser Alarm wurde von " + triggeringItem.label + " ausgelöst!"

	if(Security_OperationState.state == 1) {
		Security_Sirene.sendCommand(ON)
		message = "Lauter Alarm wurde von " + triggeringItem.label + " ausgelöst!"
	}

	sendBroadcastNotification(message)
	logInfo("security-management.rules", "Detected Assault Attack - Alarm was triggered!")
end

rule "Security System - Armament-Management"
when
	Item PresenceManagement received update 0 or
	Item PresenceManagement received update 2 or
	Item Security_OperationState_AwayShort received update or
	Item Security_OperationState_AwayLong received update
then
	val operationState = switch PresenceManagement.state as DecimalType {
		case 0: Security_OperationState_AwayShort.state as DecimalType
		case 2: Security_OperationState_AwayLong.state as DecimalType
		default: 0
	}

	if(operationState > 0) {
		val activatedAssaultTrigger = gSecurity_AssaultTrigger.members.findFirst[i|i.state == OPEN || i.state == ON]
		if(activatedAssaultTrigger !== null) {
			sendBroadcastNotification(activatedAssaultTrigger.label + " ist auf / an! Angrifferkennung bleibt aus.")
			return
		}

		Security_OperationState.postUpdate(operationState)
	}
end

rule "Security System - Disarmament-Management"
when
	Member of gSecurity_AssaultDisarmamer received update
then
	Security_OperationState.postUpdate(0)
end

rule "Security System - Lock Closure-Management"
when
	Member of gSecurity_LockClosureTrigger received update CLOSED or
	Member of gSecurity_LockClosureTrigger received update OFF
then
	val room = transform("REGEX", "s/^([^_]+_[^_]+).*$/$1/g", triggeringItem.name)
	val first = gLock.members.findFirst[l|l.name.startsWith(room)];

	if(first !== null) {
		first.sendCommand(ON)
	} else {
		logWarn("security-management.rules", "gLock not found for room " + room);
	}
end

rule "Security System - Turn off siren after X minutes"
when
  Time cron "0 * * ? * * *"
then
	if(Security_SireneAutoOff.state > 0 && Security_Sirene.state == ON && Security_AlarmTime.state != null && now.minusMinutes((Security_SireneAutoOff.state as DecimalType).intValue).isAfter((Security_AlarmTime.state as DateTimeType).zonedDateTime.toInstant().toEpochMilli)) {
		Security_Sirene.sendCommand(OFF)
		sendBroadcastNotification("Alarm wurde nach " + Security_AlarmTime.state + " Minuten automatisch deaktiviert.")
		logInfo("security-management.rules", "Alarm wurde nach " + Security_AlarmTime.state + " Minuten automatisch deaktiviert.")
	}
end
