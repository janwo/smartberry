rule "Set presence on motion"
when
	Member of gPresenceManagement_PresenceTrigger received update ON
then
	val room = transform("REGEX", "s/^([^_]+_[^_]+).*$/$1/g", triggeringItem.name)
	val first = gPresenceManagement_LastPresence.members.findFirst[f|f.name.startsWith(room)];

	if(first !== null) {
		first.postUpdate(now.toString)
	} else {
		logWarn("presence-management.rules", "gPresenceManagement_LastPresence not found for room " + room);
	}

	PresenceManagement_LastPresence.postUpdate(now.toString)

	if(PresenceManagement.state != 1) {
		PresenceManagement.postUpdate(1)
	}
end

rule "Set presence state to away in absence"
when
  	Time cron "0 0 * ? * * *"
then
	if(now.minusHours((PresenceManagement_HoursUntilAwayLong.state as DecimalType).intValue).isAfter((PresenceManagement_LastPresence.state as DateTimeType).zonedDateTime.toInstant().toEpochMilli)) {
		PresenceManagement.postUpdate(2)
	} else if (now.minusHours((PresenceManagement_HoursUntilAwayShort.state as DecimalType).intValue).isAfter((PresenceManagement_LastPresence.state as DateTimeType).zonedDateTime.toInstant().toEpochMilli)) {
		PresenceManagement.postUpdate(0)
	}
end

rule "Simulate lights when away and simulation state is activated"
when
  Time cron "0 */15 * ? * *"
then
	if(PresenceManagement.state != PresenceManagement_Simulation.state) {
		return
	}

	gPresenceManagement_SimulationItem.members.filter[m|Math::random() <= 0.2].forEach[i|
		if(i.state == ON) {
			i.sendCommand(OFF)
		} else {
			i.sendCommand(ON)
		}
	]
end
